generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum AppEnvironment {
  PHONE
  TABLET
}

model User {
  id                    String                  @id @default(uuid())
  name                  String?
  surname               String?
  username              String?                 @unique
  email                 String                  @unique
  password              String?
  gmailLoginKey         String?
  icloudLoginKey        String?
  referenceCode         String?
  isPaidMembership      Boolean                 @default(false)
  paidMembershipKey     String?
  role                  Role                    @default(USER)
  createdAt             DateTime                @default(now())
  userAgreements        UserAgreement[]
  userOneTimeCodes      UserOneTimeCode[]
  likedQuestions        UserLikedQuestion[]
  userAnsweredQuestions UserAnsweredQuestions[]
  userViewedQuestions   UserViewedQuestion[]
  appEnvironment        AppEnvironment

  @@map("users")
}

model UserOneTimeCode {
  id        String   @id @default(uuid())
  userId    String
  code      String
  expiresAt DateTime @default(now()) // 10Minute
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id])

  @@map("user_one_time_codes")
}

model Agreement {
  id             String          @id @default(uuid())
  title          String
  description    String
  version        String
  userAgreements UserAgreement[]

  @@map("agreements")
}

model UserAgreement {
  id          String    @id @default(uuid())
  agreementId String
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  agreement   Agreement @relation(fields: [agreementId], references: [id])

  @@map("user_agreements")
}

model Category {
  id                      String                  @id @default(uuid())
  name                    String
  description             String?
  parentCategoryId        String? // optional FK field
  culture                 String
  color                   String                  @default("white")
  type                    String // general | ref |  premimum
  userCompletedCategories UserCompletedCategory[]
  parentCategory          Category?               @relation("CategoryToCategory", fields: [parentCategoryId], references: [id])
  childCategories         Category[]              @relation("CategoryToCategory")
  questions               Question[]
  isPremiumCat            Boolean                 @default(false)
  isRefCat                Boolean                 @default(false)

  @@map("categories")
}

model Question {
  id           String   @id @default(uuid())
  title        String
  description  String
  categoryId   String
  culture      String
  sort         Int      @default(1)
  category     Category @relation(fields: [categoryId], references: [id])
  isPremiumQue Boolean  @default(false)
  isRefQue     Boolean  @default(false)

  @@map("questions")
}

model UserLikedQuestion {
  id         String @id @default(uuid())
  userId     String
  questionId String
  user       User   @relation(fields: [userId], references: [id])

  @@map("user_liked_questions")
}

model UserViewedQuestion {
  id         String   @id @default(uuid())
  userId     String
  questionId String
  viewedAt   DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])

  @@map("user_viewed_questions")
}

model UserCompletedCategory {
  id         String   @id @default(uuid())
  userId     String
  categoryId String
  viewedAt   DateTime @default(now())
  category   Category @relation(fields: [categoryId], references: [id])

  @@map("user_completed_categories")
}

model UserAnsweredQuestions {
  id         String @id @default(uuid())
  userId     String
  questionId String
  answerId   String
  user       User   @relation(fields: [userId], references: [id])

  @@map("user_answered_questions")
}
