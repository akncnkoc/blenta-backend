generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum AppEnvironment {
  PHONE
  TABLET
}

enum CategoryType {
  TEST
  QUESTION
}

model User {
  id                    String                  @id @default(uuid())
  name                  String?
  surname               String?
  username              String?                 @unique
  email                 String                  @unique
  phoneNumber           String?
  age                   String?
  gender                Boolean
  isRegistered          Boolean                 @default(false)
  password              String?
  gmailLoginKey         String?                 @unique
  icloudLoginKey        String?                 @unique
  isPaidMembership      Boolean                 @default(false)
  paidMembershipKey     String?
  role                  Role                    @default(USER)
  onesignalKey          String?
  appEnvironment        AppEnvironment
  userAgreements        UserAgreement[]
  userOneTimeCodes      UserOneTimeCode[]
  likedQuestions        UserLikedQuestion[]
  userAnsweredQuestions UserAnsweredQuestions[]
  userViewedQuestions   UserViewedQuestion[]
  userLikedCategories   UserLikedCategory[]

  createdAt                DateTime                 @default(now())
  userReferencedCategories UserReferencedCategory[]

  @@map("users")
}

model UserOneTimeCode {
  id        String   @id @default(uuid())
  userId    String
  code      String
  expiresAt DateTime @default(now()) // 10Minute
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@map("user_one_time_codes")
}

model Agreement {
  id             String          @id @default(uuid())
  title          String
  description    String
  version        String
  userAgreements UserAgreement[]

  @@map("agreements")
}

model UserAgreement {
  id          String    @id @default(uuid())
  agreementId String
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  agreement   Agreement @relation(fields: [agreementId], references: [id])

  @@map("user_agreements")
}

model Category {
  id                       String                   @id @default(uuid())
  name                     String
  description              String?
  parentCategoryId         String? // optional FK field
  culture                  String
  color                    String                   @default("white")
  isPremiumCat             Boolean                  @default(false)
  isRefCat                 Boolean                  @default(false)
  type                     CategoryType             @default(QUESTION)
  parentCategory           Category?                @relation("CategoryToCategory", fields: [parentCategoryId], references: [id])
  referenceCode            String?
  userLikedCategories      UserLikedCategory[]
  userCompletedCategories  UserCompletedCategory[]
  childCategories          Category[]               @relation("CategoryToCategory")
  questions                Question[]
  userReferencedCategories UserReferencedCategory[]

  @@map("categories")
}

model UserReferencedCategory {
  id         String   @id @default(uuid())
  categoryId String
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])

  @@map("user_referenced_categories")
}

model Question {
  id                 String              @id @default(uuid())
  title              String
  description        String
  categoryId         String
  culture            String
  sort               Int                 @default(1)
  category           Category            @relation(fields: [categoryId], references: [id])
  isPremiumQue       Boolean             @default(false)
  isRefQue           Boolean             @default(false)
  userLikedQuestions UserLikedQuestion[]

  @@map("questions")
}

model UserLikedQuestion {
  id         String   @id @default(uuid())
  userId     String
  questionId String
  user       User     @relation(fields: [userId], references: [id])
  question   Question @relation(fields: [questionId], references: [id])

  @@map("user_liked_questions")
}

model UserLikedCategory {
  id         String   @id @default(uuid())
  userId     String
  categoryId String
  user       User     @relation(fields: [userId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])

  @@map("user_liked_categories")
}

model UserViewedQuestion {
  id         String   @id @default(uuid())
  userId     String
  questionId String
  viewedAt   DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])

  @@map("user_viewed_questions")
}

model UserCompletedCategory {
  id         String   @id @default(uuid())
  userId     String
  categoryId String
  viewedAt   DateTime @default(now())
  category   Category @relation(fields: [categoryId], references: [id])

  @@map("user_completed_categories")
}

model UserAnsweredQuestions {
  id         String @id @default(uuid())
  userId     String
  questionId String
  answerId   String
  user       User   @relation(fields: [userId], references: [id])

  @@map("user_answered_questions")
}

model Admin {
  id       String @id @default(uuid())
  name     String
  surname  String
  email    String @unique
  password String

  @@map("admins")
}
