generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                  @id @default(uuid())
  name                  String
  surname               String
  username              String?                 @unique
  email                 String                  @unique
  password              String
  gmailLoginKey         String?
  icloudLoginKey        String?
  referenceCode         String?
  isPaidMembership      Boolean                 @default(false)
  paidMembershipKey     String?
  createdAt             DateTime                @default(now())
  UserAgreement         UserAgreement[]
  UserOneTimeCode       UserOneTimeCode[]
  likedQuestions        UserLikedQuestion[]
  userAnsweredQuestions UserAnsweredQuestions[]
  UserViewedQuestion    UserViewedQuestion[]
}

model UserOneTimeCode {
  id        String   @id @default(uuid())
  userId    String
  code      String
  expiresAt DateTime @default(now()) // 10Minute
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id])
}

model Agreement {
  id            String          @id @default(uuid())
  title         String
  description   String
  version       String
  UserAgreement UserAgreement[]
}

model UserAgreement {
  id          String    @id @default(uuid())
  agreementId String
  userId      String
  User        User      @relation(fields: [userId], references: [id])
  Agreement   Agreement @relation(fields: [agreementId], references: [id])
}

model Category {
  id                    String                  @id @default(uuid())
  name                  String
  description           String?
  parentCategoryId      String? // optional FK field
  culture               String
  color                 String                  @default("white")
  type                  String // general | ref |  premimum
  UserCompletedCategory UserCompletedCategory[]
  parentCategory        Category?               @relation("CategoryToCategory", fields: [parentCategoryId], references: [id])
  childCategories       Category[]              @relation("CategoryToCategory")
  questions             Question[]
}

model Question {
  id          String   @id @default(uuid())
  title       String
  description String
  categoryId  String
  culture     String
  sort        Int      @default(1)
  Category    Category @relation(fields: [categoryId], references: [id])
}

model UserLikedQuestion {
  id         String @id @default(uuid())
  userId     String
  questionId String
  User       User   @relation(fields: [userId], references: [id])
}

model UserViewedQuestion {
  id         String   @id @default(uuid())
  userId     String
  questionId String
  viewedAt   DateTime @default(now())
  User       User     @relation(fields: [userId], references: [id])
}

model UserCompletedCategory {
  id         String   @id @default(uuid())
  userId     String
  categoryId String
  viewedAt   DateTime @default(now())
  Category   Category @relation(fields: [categoryId], references: [id])
}

model UserAnsweredQuestions {
  id         String @id @default(uuid())
  userId     String
  questionId String
  answerId   String
  User       User   @relation(fields: [userId], references: [id])
}
